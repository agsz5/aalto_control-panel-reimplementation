<div class="container">
    <!-- The fileinput-button span is used to style the file input field as button -->
    <span class="btn btn-success fileinput-button">
        <i class="glyphicon glyphicon-plus"></i>
        <span>Add files...</span>
        <!-- The file input field used as target for the file upload widget -->
        <input id="fileuploader" type="file" name="files[]" multiple>
    </span>
    <br>
    <br>
    <!-- The global progress bar -->
    <div id="progress" class="progress">
        <div class="progress-bar progress-bar-success"></div>
    </div>
    <!-- The container for the uploaded files -->
    <div id="files" class="files"></div>
    <br>
</div>

<!-- The jQuery UI widget factory, can be omitted if jQuery UI is already included -->
<script src="../assets/lib/jQuery-File-Upload/js/vendor/jquery.ui.widget.js"></script>
<!-- The Load Image plugin is included for the preview images and image resizing functionality -->
<script src="../assets/lib/jQuery-File-Upload/js/ext/load-image.min.js"></script>
<!-- The Canvas to Blob plugin is included for image resizing functionality -->
<script src="../assets/lib/jQuery-File-Upload/js/ext/JavaScript-Canvas-to-Blob_js_canvas-to-blob.js"></script>
<!-- The Iframe Transport is required for browsers without support for XHR file uploads -->
<script src="../assets/lib/jQuery-File-Upload/js/jquery.iframe-transport.js"></script>
<!-- The basic File Upload plugin -->
<script src="../assets/lib/jQuery-File-Upload/js/jquery.fileupload.js"></script>
<!-- The File Upload processing plugin -->
<script src="../assets/lib/jQuery-File-Upload/js/jquery.fileupload-process.js"></script>
<!-- The File Upload image preview & resize plugin -->
<script src="../assets/lib/jQuery-File-Upload/js/jquery.fileupload-image.js"></script>
<!-- The File Upload audio preview plugin -->
<script src="../assets/lib/jQuery-File-Upload/js/jquery.fileupload-audio.js"></script>
<!-- The File Upload video preview plugin -->
<script src="../assets/lib/jQuery-File-Upload/js/jquery.fileupload-video.js"></script>
<!-- The File Upload validation plugin -->
<script src="../assets/lib/jQuery-File-Upload/js/jquery.fileupload-validate.js"></script>


<script>
    /*jslint unparam: true, regexp: true */
    /*global window, $ */
    var concurrentUploads = 0;
    $(function () {
        'use strict';
        var urlValue = window.location.pathname.replace("/auth/", "/fileupload/");
        /* Change this to the location of your server-side upload handler:*/
        var url = urlValue;
        var uploadButton = $('<button/>')
                .addClass('btn btn-primary uploadbtn')
                .prop('disabled', true)
                .text('Processing...')
                .on('click', function () {
                    var $this = $(this),
                            data = $this.data();
                    $this
                            .off('click')
                            .text('Abort')
                            .on('click', function () {
                                $this.remove();
                                data.abort();
                            });

                    concurrentUploads++;
                    data.submit().always(function () {
                        $this.remove();
                    });
                });
        $('#fileuploader').fileuploader({
            url: url,
            dataType: 'json',
            autoUpload: false,
            acceptFileTypes: /(\.|\/)(gif|jpe?g|png|bmp|pptx?|zip|pdf|docx?|xlsx?)$/i,
            maxFileSize: 10124000,
            /*
            / 5 MB
            / Enable image resizing, except for Android and Opera,
            / which actually support image resizing, but fail to
            / send Blob objects via XHR requests: */
            disableImageResize: /Android(?!.*Chrome)|Opera/
                    .test(window.navigator.userAgent),
            previewMaxWidth: 100,
            previewMaxHeight: 100,
            previewCrop: true
        }).on('fileuploaderadd', function (e, data) {
                    data.context = $('<span/>').appendTo('#files');
                    $.each(data.files, function (index, file) {
                        var node = $('<span/>')
                                .append($('<span/>').text(file.name));
                        if (!index) {
                            node
                                    /*.append('<br>')*/
                                    .append(uploadButton.clone(true).data(data));
                        }
                        node.appendTo(data.context);
                    });
                    $(".uploadbtn").first().removeClass("uploadbtn").click();
                }).on('fileuploaderprocessalways', function (e, data) {
                    var index = data.index,
                            file = data.files[index],
                            node = $(data.context.children()[index]);
                    if (file.preview) {
                        node
                                /*.prepend('<br>')*/
                                .prepend(file.preview);
                    }
                    if (file.error) {
                        node
                                .append('<br>')
                                .append($('<span class="text-danger"/>').text(file.error));
                    }
                    if (index + 1 === data.files.length) {
                        data.context.find('button')
                                .text('Uploading...')
                                .prop('disabled', !!data.files.error);
                    }
                }).on('fileuploaderprogressall', function (e, data) {
                    var progress = parseInt(data.loaded / data.total * 100, 10);
                    $('#progress .progress-bar').css(
                            'width',
                            progress + '%'
                    );
                }).on('fileuploaderdone', function (e, data) {
                    $.each(data.files, function (index, file) {
                        if (file.url) {
                            var link = $('<a>')
                                    .attr('target', '_blank')
                                    .prop('href', file.url);
                            $(data.context.children()[index])
                                    .wrap(link);
                        } else if (file.error) {
                            var error = $('<span class="text-danger"/>').text(file.error);
                            $(data.context.children()[index])
                                    .append('<br>')
                                    .append(error);
                        }
                        /*
                        var nextButton = $(".uploadbtn").first().removeClass('uploadbtn');
                        if(nextButton)
                        {
                            nextButton.removeClass('uploadbtn');
                            nextButton.click();
                        } else
                        {
                            alert("Reloading...");
                            window.location.reload(true);
                        }*/
                    });
                    concurrentUploads--;
                    if(concurrentUploads == 0)
                        window.location.reload(true);
                }).on('fileuploaderfail', function (e, data) {
                    $.each(data.files, function (index, file) {
                        var error = $('<span class="text-danger"/>').text('File upload failed.');
                        $(data.context.children()[index])
                                .append('<br>')
                                .append(error);
                    });
                }).prop('disabled', !$.support.fileInput)
                .parent().addClass($.support.fileInput ? undefined : 'disabled');
    });
</script>
